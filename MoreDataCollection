#%%
# installation/import
#%pip install spotipy
import spotipy
import os
import pandas as pd
import numpy as np

# set variables
os.environ['SPOTIPY_CLIENT_ID']='e768479667c146d5a107462531ee7ff7'
os.environ['SPOTIPY_CLIENT_SECRET']='abb7798983df4103a7ad4d56a2c2e819'
os.environ['SPOTIPY_REDIRECT_URI']='http://example.com/callback/'

# %%
# test run
import spotipy
from spotipy.oauth2 import SpotifyOAuth

scope = 'user-top-read'
ranges = 'medium_term'

sp = spotipy.Spotify(auth_manager=SpotifyOAuth(scope=scope))

sp_range = 'medium_term'

results = sp.current_user_top_artists(time_range=sp_range, limit=50)

for i, item in enumerate(results['items']):
    print(i, item['name'])

# works!

# %%
# load in dataset to test grabbing artist/album/song data needed 
test = pd.read_csv("daily_mix_1.csv")

# %%
# test grabbing data 
sp.track('0WTq8iUzSlGDAbowEdRKKD')['album']['id']
sp.track('0WTq8iUzSlGDAbowEdRKKD')['album']['release_date']

# %%
# define function to grab genre and release date data from previous dataframe
def grabMore(file):
    
    # Create empty dataframe
    playlist_features_list = []
    
    playlist_df = pd.DataFrame(file)
    
    # Loop through every track in the dataframe, extract features and append the features to the playlist df
    
    tracklist = playlist_df['track_id']
    for track in tracklist:        # Create empty dict
        playlist_features = {}        # Get metadata
        playlist_features["artist_pop"] = sp.artist(playlist_features["artist_id"])['popularity']
        
        # Get audio features
        audio_features = sp.audio_features(playlist_features["track_id"])[0]
        for feature in playlist_features_list[4:]:
            playlist_features[feature] = audio_features[feature]
        
        # Get artist popularity
        

        # Concat the dfs
        track_df = pd.DataFrame(playlist_features, index = [0])
        playlist_df = pd.concat([playlist_df, track_df], ignore_index = True)
        
    return playlist_df
